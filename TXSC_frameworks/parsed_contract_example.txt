ANTLR runtime and generated code versions disagree: 4.8!=4.7.2
ANTLR runtime and generated code versions disagree: 4.8!=4.7.2
{'children': [{'name': 'solidity',
               'type': 'PragmaDirective',
               'value': '>=0.5.0<0.7.0'},
              {'baseContracts': [],
               'kind': 'contract',
               'name': 'Puzzle',
               'subNodes': [{'initialValue': None,
                             'type': 'StateVariableDeclaration',
                             'variables': [{'expression': None,
                                            'isDeclaredConst': False,
                                            'isIndexed': False,
                                            'isStateVar': True,
                                            'name': 'owner',
                                            'type': 'VariableDeclaration',
                                            'typeName': {'name': 'address',
                                                         'stateMutability': 'payable',
                                                         'type': 'ElementaryTypeName'},
                                            'visibility': 'public'}]},
                            {'initialValue': None,
                             'type': 'StateVariableDeclaration',
                             'variables': [{'expression': None,
                                            'isDeclaredConst': False,
                                            'isIndexed': False,
                                            'isStateVar': True,
                                            'name': 'solved',
                                            'type': 'VariableDeclaration',
                                            'typeName': {'name': 'bool',
                                                         'type': 'ElementaryTypeName'},
                                            'visibility': 'public'}]},
                            {'initialValue': None,
                             'type': 'StateVariableDeclaration',
                             'variables': [{'expression': None,
                                            'isDeclaredConst': False,
                                            'isIndexed': False,
                                            'isStateVar': True,
                                            'name': 'reward',
                                            'type': 'VariableDeclaration',
                                            'typeName': {'name': 'uint',
                                                         'type': 'ElementaryTypeName'},
                                            'visibility': 'public'}]},
                            {'initialValue': None,
                             'type': 'StateVariableDeclaration',
                             'variables': [{'expression': None,
                                            'isDeclaredConst': False,
                                            'isIndexed': False,
                                            'isStateVar': True,
                                            'name': 'diff',
                                            'type': 'VariableDeclaration',
                                            'typeName': {'name': 'bytes32',
                                                         'type': 'ElementaryTypeName'},
                                            'visibility': 'public'}]},
                            {'initialValue': None,
                             'type': 'StateVariableDeclaration',
                             'variables': [{'expression': None,
                                            'isDeclaredConst': False,
                                            'isIndexed': False,
                                            'isStateVar': True,
                                            'name': 'solution',
                                            'type': 'VariableDeclaration',
                                            'typeName': {'name': 'bytes32',
                                                         'type': 'ElementaryTypeName'},
                                            'visibility': 'public'}]},
                            {'body': {'statements': [{'initialValue': None,
                                                      'type': 'VariableDeclarationStatement',
                                                      'variables': [{'name': 'out',
                                                                     'storageLocation': None,
                                                                     'type': 'VariableDeclaration',
                                                                     'typeName': {'name': 'bytes32',
                                                                                  'type': 'ElementaryTypeName'}}]},
                                                     {'body': {'statements': [{'expression': {'left': {'name': 'out',
                                                                                                       'type': 'Identifier'},
                                                                                              'operator': '|=',
                                                                                              'right': {'left': {'arguments': [{'left': {'base': {'name': 'b',
                                                                                                                                                  'type': 'Identifier'},
                                                                                                                                         'index': {'left': {'name': 'offset',
                                                                                                                                                            'type': 'Identifier'},
                                                                                                                                                   'operator': '+',
                                                                                                                                                   'right': {'name': 'i',
                                                                                                                                                             'type': 'Identifier'},
                                                                                                                                                   'type': 'BinaryOperation'},
                                                                                                                                         'type': 'IndexAccess'},
                                                                                                                                'operator': '&',
                                                                                                                                'right': {'number': '0xFF',
                                                                                                                                          'subdenomination': None,
                                                                                                                                          'type': 'NumberLiteral'},
                                                                                                                                'type': 'BinaryOperation'}],
                                                                                                                 'expression': {'type': 'ElementaryTypeNameExpression',
                                                                                                                                'typeName': {'name': 'bytes32',
                                                                                                                                             'type': 'ElementaryTypeName'}},
                                                                                                                 'names': [],
                                                                                                                 'type': 'FunctionCall'},
                                                                                                        'operator': '>>',
                                                                                                        'right': {'components': [{'left': {'name': 'i',
                                                                                                                                           'type': 'Identifier'},
                                                                                                                                  'operator': '*',
                                                                                                                                  'right': {'number': '8',
                                                                                                                                            'subdenomination': None,
                                                                                                                                            'type': 'NumberLiteral'},
                                                                                                                                  'type': 'BinaryOperation'}],
                                                                                                                  'isArray': False,
                                                                                                                  'type': 'TupleExpression'},
                                                                                                        'type': 'BinaryOperation'},
                                                                                              'type': 'BinaryOperation'},
                                                                               'type': 'ExpressionStatement'}],
                                                               'type': 'Block'},
                                                      'conditionExpression': {'left': {'name': 'i',
                                                                                       'type': 'Identifier'},
                                                                              'operator': '<',
                                                                              'right': {'number': '32',
                                                                                        'subdenomination': None,
                                                                                        'type': 'NumberLiteral'},
                                                                              'type': 'BinaryOperation'},
                                                      'initExpression': {'initialValue': {'number': '0',
                                                                                          'subdenomination': None,
                                                                                          'type': 'NumberLiteral'},
                                                                         'type': 'VariableDeclarationStatement',
                                                                         'variables': [{'name': 'i',
                                                                                        'storageLocation': None,
                                                                                        'type': 'VariableDeclaration',
                                                                                        'typeName': {'name': 'uint',
                                                                                                     'type': 'ElementaryTypeName'}}]},
                                                      'loopExpression': {'expression': {'isPrefix': False,
                                                                                        'operator': '++',
                                                                                        'subExpression': {'name': 'i',
                                                                                                          'type': 'Identifier'},
                                                                                        'type': 'UnaryOperation'},
                                                                         'type': 'ExpressionStatement'},
                                                      'type': 'ForStatement'},
                                                     {'name': 'out',
                                                      'type': 'Identifier'}],
                                      'type': 'Block'},
                             'isConstructor': False,
                             'modifiers': [],
                             'name': 'bytesToBytes32',
                             'parameters': {'parameters': [{'isIndexed': False,
                                                            'isStateVar': False,
                                                            'name': 'b',
                                                            'storageLocation': 'memory',
                                                            'type': 'Parameter',
                                                            'typeName': {'name': 'bytes',
                                                                         'type': 'ElementaryTypeName'}},
                                                           {'isIndexed': False,
                                                            'isStateVar': False,
                                                            'name': 'offset',
                                                            'storageLocation': None,
                                                            'type': 'Parameter',
                                                            'typeName': {'name': 'uint',
                                                                         'type': 'ElementaryTypeName'}}],
                                            'type': 'ParameterList'},
                             'returnParameters': {'parameters': [{'isIndexed': False,
                                                                  'isStateVar': False,
                                                                  'name': None,
                                                                  'storageLocation': None,
                                                                  'type': 'Parameter',
                                                                  'typeName': {'name': 'bytes32',
                                                                               'type': 'ElementaryTypeName'}}],
                                                  'type': 'ParameterList'},
                             'stateMutability': 'pure',
                             'type': 'FunctionDefinition',
                             'visibility': 'private'},
                            {'body': {'statements': [{'expression': {'left': {'name': 'owner',
                                                                              'type': 'Identifier'},
                                                                     'operator': '=',
                                                                     'right': {'expression': {'name': 'msg',
                                                                                              'type': 'Identifier'},
                                                                               'memberName': 'sender',
                                                                               'type': 'MemberAccess'},
                                                                     'type': 'BinaryOperation'},
                                                      'type': 'ExpressionStatement'},
                                                     {'expression': {'left': {'name': 'reward',
                                                                              'type': 'Identifier'},
                                                                     'operator': '=',
                                                                     'right': {'expression': {'name': 'msg',
                                                                                              'type': 'Identifier'},
                                                                               'memberName': 'value',
                                                                               'type': 'MemberAccess'},
                                                                     'type': 'BinaryOperation'},
                                                      'type': 'ExpressionStatement'},
                                                     {'expression': {'left': {'name': 'solved',
                                                                              'type': 'Identifier'},
                                                                     'operator': '=',
                                                                     'right': {'type': 'BooleanLiteral',
                                                                               'value': False},
                                                                     'type': 'BinaryOperation'},
                                                      'type': 'ExpressionStatement'},
                                                     {'expression': {'left': {'name': 'diff',
                                                                              'type': 'Identifier'},
                                                                     'operator': '=',
                                                                     'right': {'name': 'difficulty',
                                                                               'type': 'Identifier'},
                                                                     'type': 'BinaryOperation'},
                                                      'type': 'ExpressionStatement'}],
                                      'type': 'Block'},
                             'isConstructor': True,
                             'modifiers': [],
                             'name': None,
                             'parameters': {'parameters': [{'isIndexed': False,
                                                            'isStateVar': False,
                                                            'name': 'difficulty',
                                                            'storageLocation': None,
                                                            'type': 'Parameter',
                                                            'typeName': {'name': 'bytes32',
                                                                         'type': 'ElementaryTypeName'}}],
                                            'type': 'ParameterList'},
                             'returnParameters': None,
                             'stateMutability': 'payable',
                             'type': 'FunctionDefinition',
                             'visibility': 'public'},
                            {'body': {'statements': [{'expression': {'arguments': [{'left': {'name': 'owner',
                                                                                             'type': 'Identifier'},
                                                                                    'operator': '==',
                                                                                    'right': {'expression': {'name': 'msg',
                                                                                                             'type': 'Identifier'},
                                                                                              'memberName': 'sender',
                                                                                              'type': 'MemberAccess'},
                                                                                    'type': 'BinaryOperation'},
                                                                                   {'type': 'StringLiteral',
                                                                                    'value': 'Only '
                                                                                             'the '
                                                                                             'owner '
                                                                                             'may '
                                                                                             'update '
                                                                                             'the '
                                                                                             'reward'}],
                                                                     'expression': {'name': 'require',
                                                                                    'type': 'Identifier'},
                                                                     'names': [],
                                                                     'type': 'FunctionCall'},
                                                      'type': 'ExpressionStatement'},
                                                     {'FalseBody': None,
                                                      'TrueBody': {'statements': [{'expression': {'arguments': [{'name': 'reward',
                                                                                                                 'type': 'Identifier'}],
                                                                                                  'expression': {'expression': {'name': 'owner',
                                                                                                                                'type': 'Identifier'},
                                                                                                                 'memberName': 'transfer',
                                                                                                                 'type': 'MemberAccess'},
                                                                                                  'names': [],
                                                                                                  'type': 'FunctionCall'},
                                                                                   'type': 'ExpressionStatement'},
                                                                                  {'expression': {'left': {'name': 'reward',
                                                                                                           'type': 'Identifier'},
                                                                                                  'operator': '=',
                                                                                                  'right': {'expression': {'name': 'msg',
                                                                                                                           'type': 'Identifier'},
                                                                                                            'memberName': 'value',
                                                                                                            'type': 'MemberAccess'},
                                                                                                  'type': 'BinaryOperation'},
                                                                                   'type': 'ExpressionStatement'}],
                                                                   'type': 'Block'},
                                                      'condition': {'isPrefix': True,
                                                                    'operator': '!',
                                                                    'subExpression': {'name': 'solved',
                                                                                      'type': 'Identifier'},
                                                                    'type': 'UnaryOperation'},
                                                      'type': 'IfStatement'}],
                                      'type': 'Block'},
                             'isConstructor': False,
                             'modifiers': [],
                             'name': 'updateReward',
                             'parameters': {'parameters': [],
                                            'type': 'ParameterList'},
                             'returnParameters': [],
                             'stateMutability': 'payable',
                             'type': 'FunctionDefinition',
                             'visibility': 'public'},
                            {'body': {'statements': [{'FalseBody': None,
                                                      'TrueBody': {'statements': [{'body': {'statements': [],
                                                                                            'type': 'Block'},
                                                                                   'conditionExpression': {'left': {'name': 'i',
                                                                                                                    'type': 'Identifier'},
                                                                                                           'operator': '<',
                                                                                                           'right': {'number': '10000',
                                                                                                                     'subdenomination': None,
                                                                                                                     'type': 'NumberLiteral'},
                                                                                                           'type': 'BinaryOperation'},
                                                                                   'initExpression': {'initialValue': {'number': '0',
                                                                                                                       'subdenomination': None,
                                                                                                                       'type': 'NumberLiteral'},
                                                                                                      'type': 'VariableDeclarationStatement',
                                                                                                      'variables': [{'name': 'i',
                                                                                                                     'storageLocation': None,
                                                                                                                     'type': 'VariableDeclaration',
                                                                                                                     'typeName': {'name': 'uint',
                                                                                                                                  'type': 'ElementaryTypeName'}}]},
                                                                                   'loopExpression': {'expression': {'isPrefix': False,
                                                                                                                     'operator': '++',
                                                                                                                     'subExpression': {'name': 'i',
                                                                                                                                       'type': 'Identifier'},
                                                                                                                     'type': 'UnaryOperation'},
                                                                                                      'type': 'ExpressionStatement'},
                                                                                   'type': 'ForStatement'},
                                                                                  {'FalseBody': None,
                                                                                   'TrueBody': {'statements': [{'expression': {'arguments': [{'name': 'reward',
                                                                                                                                              'type': 'Identifier'}],
                                                                                                                               'expression': {'expression': {'expression': {'name': 'msg',
                                                                                                                                                                            'type': 'Identifier'},
                                                                                                                                                             'memberName': 'sender',
                                                                                                                                                             'type': 'MemberAccess'},
                                                                                                                                              'memberName': 'transfer',
                                                                                                                                              'type': 'MemberAccess'},
                                                                                                                               'names': [],
                                                                                                                               'type': 'FunctionCall'},
                                                                                                                'type': 'ExpressionStatement'},
                                                                                                               {'body': {'statements': [{'expression': {'left': {'name': 'solution',
                                                                                                                                                                 'type': 'Identifier'},
                                                                                                                                                        'operator': '=',
                                                                                                                                                        'right': {'arguments': [{'expression': {'name': 'msg',
                                                                                                                                                                                                'type': 'Identifier'},
                                                                                                                                                                                 'memberName': 'data',
                                                                                                                                                                                 'type': 'MemberAccess'}],
                                                                                                                                                                  'expression': {'name': 'sha256',
                                                                                                                                                                                 'type': 'Identifier'},
                                                                                                                                                                  'names': [],
                                                                                                                                                                  'type': 'FunctionCall'},
                                                                                                                                                        'type': 'BinaryOperation'},
                                                                                                                                         'type': 'ExpressionStatement'}],
                                                                                                                         'type': 'Block'},
                                                                                                                'conditionExpression': {'left': {'name': 'i',
                                                                                                                                                 'type': 'Identifier'},
                                                                                                                                        'operator': '<',
                                                                                                                                        'right': {'number': '32',
                                                                                                                                                  'subdenomination': None,
                                                                                                                                                  'type': 'NumberLiteral'},
                                                                                                                                        'type': 'BinaryOperation'},
                                                                                                                'initExpression': {'initialValue': {'number': '0',
                                                                                                                                                    'subdenomination': None,
                                                                                                                                                    'type': 'NumberLiteral'},
                                                                                                                                   'type': 'VariableDeclarationStatement',
                                                                                                                                   'variables': [{'name': 'i',
                                                                                                                                                  'storageLocation': None,
                                                                                                                                                  'type': 'VariableDeclaration',
                                                                                                                                                  'typeName': {'name': 'uint',
                                                                                                                                                               'type': 'ElementaryTypeName'}}]},
                                                                                                                'loopExpression': {'expression': {'isPrefix': False,
                                                                                                                                                  'operator': '++',
                                                                                                                                                  'subExpression': {'name': 'i',
                                                                                                                                                                    'type': 'Identifier'},
                                                                                                                                                  'type': 'UnaryOperation'},
                                                                                                                                   'type': 'ExpressionStatement'},
                                                                                                                'type': 'ForStatement'},
                                                                                                               {'expression': {'left': {'name': 'solved',
                                                                                                                                        'type': 'Identifier'},
                                                                                                                               'operator': '=',
                                                                                                                               'right': {'type': 'BooleanLiteral',
                                                                                                                                         'value': True},
                                                                                                                               'type': 'BinaryOperation'},
                                                                                                                'type': 'ExpressionStatement'}],
                                                                                                'type': 'Block'},
                                                                                   'condition': {'type': 'BooleanLiteral',
                                                                                                 'value': True},
                                                                                   'type': 'IfStatement'}],
                                                                   'type': 'Block'},
                                                      'condition': {'isPrefix': True,
                                                                    'operator': '!',
                                                                    'subExpression': {'name': 'solved',
                                                                                      'type': 'Identifier'},
                                                                    'type': 'UnaryOperation'},
                                                      'type': 'IfStatement'}],
                                      'type': 'Block'},
                             'isConstructor': False,
                             'modifiers': [],
                             'name': 'submitSolution',
                             'parameters': {'parameters': [],
                                            'type': 'ParameterList'},
                             'returnParameters': [],
                             'stateMutability': 'payable',
                             'type': 'FunctionDefinition',
                             'visibility': 'public'}],
               'type': 'ContractDefinition'}],
 'type': 'SourceUnit'}
