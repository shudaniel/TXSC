ANTLR runtime and generated code versions disagree: 4.8!=4.7.2
ANTLR runtime and generated code versions disagree: 4.8!=4.7.2
{'children': [{'name': 'solidity',
               'type': 'PragmaDirective',
               'value': '>=0.5.0<0.6.0'},
              {'path': './provableAPI.sol',
               'symbolAliases': {},
               'type': 'ImportDirective',
               'unitAlias': None},
              {'baseContracts': [{'arguments': [],
                                  'baseName': {'namePath': 'usingProvable',
                                               'type': 'UserDefinedTypeName'},
                                  'type': 'InheritanceSpecifier'}],
               'kind': 'contract',
               'name': 'WolframAlpha',
               'subNodes': [{'initialValue': None,
                             'type': 'StateVariableDeclaration',
                             'variables': [{'expression': None,
                                            'isDeclaredConst': False,
                                            'isIndexed': False,
                                            'isStateVar': True,
                                            'name': 'temperature',
                                            'type': 'VariableDeclaration',
                                            'typeName': {'name': 'string',
                                                         'type': 'ElementaryTypeName'},
                                            'visibility': 'public'}]},
                            {'isAnonymous': False,
                             'name': 'LogNewProvableQuery',
                             'parameters': {'parameters': [{'isIndexed': False,
                                                            'isStateVar': False,
                                                            'name': 'description',
                                                            'type': 'VariableDeclaration',
                                                            'typeName': {'name': 'string',
                                                                         'type': 'ElementaryTypeName'}}],
                                            'type': 'ParameterList'},
                             'type': 'EventDefinition'},
                            {'isAnonymous': False,
                             'name': 'LogNewTemperatureMeasure',
                             'parameters': {'parameters': [{'isIndexed': False,
                                                            'isStateVar': False,
                                                            'name': 'temperature',
                                                            'type': 'VariableDeclaration',
                                                            'typeName': {'name': 'string',
                                                                         'type': 'ElementaryTypeName'}}],
                                            'type': 'ParameterList'},
                             'type': 'EventDefinition'},
                            {'body': {'statements': [{'expression': {'arguments': [{'left': {'expression': {'name': 'msg',
                                                                                                            'type': 'Identifier'},
                                                                                             'memberName': 'sender',
                                                                                             'type': 'MemberAccess'},
                                                                                    'operator': '==',
                                                                                    'right': {'arguments': [],
                                                                                              'expression': {'name': 'provable_cbAddress',
                                                                                                             'type': 'Identifier'},
                                                                                              'names': [],
                                                                                              'type': 'FunctionCall'},
                                                                                    'type': 'BinaryOperation'}],
                                                                     'expression': {'name': 'require',
                                                                                    'type': 'Identifier'},
                                                                     'names': [],
                                                                     'type': 'FunctionCall'},
                                                      'type': 'ExpressionStatement'},
                                                     {'expression': {'left': {'name': 'temperature',
                                                                              'type': 'Identifier'},
                                                                     'operator': '=',
                                                                     'right': {'name': '_result',
                                                                               'type': 'Identifier'},
                                                                     'type': 'BinaryOperation'},
                                                      'type': 'ExpressionStatement'},
                                                     {'eventCall': {'arguments': [{'name': 'temperature',
                                                                                   'type': 'Identifier'}],
                                                                    'expression': {'name': 'LogNewTemperatureMeasure',
                                                                                   'type': 'Identifier'},
                                                                    'names': [],
                                                                    'type': 'FunctionCall'},
                                                      'type': 'EmitStatement'}],
                                      'type': 'Block'},
                             'isConstructor': False,
                             'modifiers': [],
                             'name': '__callback',
                             'parameters': {'parameters': [{'isIndexed': False,
                                                            'isStateVar': False,
                                                            'name': '_myid',
                                                            'storageLocation': None,
                                                            'type': 'Parameter',
                                                            'typeName': {'name': 'bytes32',
                                                                         'type': 'ElementaryTypeName'}},
                                                           {'isIndexed': False,
                                                            'isStateVar': False,
                                                            'name': '_result',
                                                            'storageLocation': 'memory',
                                                            'type': 'Parameter',
                                                            'typeName': {'name': 'string',
                                                                         'type': 'ElementaryTypeName'}}],
                                            'type': 'ParameterList'},
                             'returnParameters': [],
                             'stateMutability': None,
                             'type': 'FunctionDefinition',
                             'visibility': 'public'},
                            {'body': {'statements': [{'eventCall': {'arguments': [{'type': 'StringLiteral',
                                                                                   'value': 'Provable '
                                                                                            'query '
                                                                                            'was '
                                                                                            'sent, '
                                                                                            'standing '
                                                                                            'by '
                                                                                            'for '
                                                                                            'the '
                                                                                            'answer...'}],
                                                                    'expression': {'name': 'LogNewProvableQuery',
                                                                                   'type': 'Identifier'},
                                                                    'names': [],
                                                                    'type': 'FunctionCall'},
                                                      'type': 'EmitStatement'},
                                                     {'expression': {'arguments': [{'type': 'StringLiteral',
                                                                                    'value': 'WolframAlpha'},
                                                                                   {'type': 'StringLiteral',
                                                                                    'value': 'temperature '
                                                                                             'in '
                                                                                             'London'}],
                                                                     'expression': {'name': 'provable_query',
                                                                                    'type': 'Identifier'},
                                                                     'names': [],
                                                                     'type': 'FunctionCall'},
                                                      'type': 'ExpressionStatement'}],
                                      'type': 'Block'},
                             'isConstructor': False,
                             'modifiers': [],
                             'name': 'update',
                             'parameters': {'parameters': [],
                                            'type': 'ParameterList'},
                             'returnParameters': [],
                             'stateMutability': 'payable',
                             'type': 'FunctionDefinition',
                             'visibility': 'public'}],
               'type': 'ContractDefinition'}],
 'type': 'SourceUnit'}
